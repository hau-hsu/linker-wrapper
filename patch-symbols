#!/usr/bin/env python3
"""
Replace $Super$$ and $Sub$$ to patch symbol definitions.

This mimics $Super$$ $Sub$$ mechanism that Arm toolchain provides:
https://developer.arm.com/documentation/dui0474/i/accessing-and-managing-symbols-with-armlink/about-using--super---and--sub---to-patch-symbol-definitions
"""

import sys
import os
import shutil
import re
from itanium_demangler import parse as demangle

def transfer_sub(matchobj):
    print(matchobj.group(0))
    return _transfer_sub(matchobj.group(0))

def _transfer_sub(mangled):
    """
    Transfer C++ mangled symbol with $Sub$$ to __wrap_.

    Foo::foo()
    >>> transfer_sub('_ZN3Foo9$Sub$$fooEv')
    '__wrap__ZN3Foo3fooEv'

    Container23::Build()
    >>> transfer_sub('_ZN11Container2211$Sub$$BuildEv')
    '__wrap__ZN11Container225BuildEv'
    """
    demangled = str(demangle(mangled).name)
    m = re.search(r'\$Sub\$\$(.+)', demangled)
    if m is None:
        raise RuntimeError(f"Cannot parse \"{mangled}\"")

    sym = m.group(0).replace('$', '\$')
    len_sym = len(m.group(0))
    sym_no_sub = m.group(1)

    pat = rf'(_Z.+){len_sym}{sym}(E.*)'
    repl = rf'__wrap_\g<1>{len(sym_no_sub)}{sym_no_sub}\g<2>'
    wrapped = re.sub(pat, repl, mangled)
    print(wrapped)
    return wrapped


def transfer_super(matchobj):
    print(matchobj.group(0))
    return _transfer_super(matchobj.group(0))

def _transfer_super(mangled):
    """
    Transfer C++ mangled symbol with $Super$$ to __wrap_.

    Foo::$Super$$foo()
    >>> transfer_super('_ZN3Foo9$Super$$fooEv')
    '__real__ZN3Foo3fooEv'

    Container22::$Super$$Build()
    >>> transfer_super('_ZN11Container2211$Super$$BuildEv')
    '__real__ZN11Container225BuildEv'
    """
    demangled = str(demangle(mangled).name)
    m = re.search(r'\$Super\$\$(.+)', demangled)
    if m is None:
        raise RuntimeError(f"Cannot parse \"{mangled}\"")

    sym = m.group(0).replace('$', '\$')
    len_sym = len(m.group(0))
    sym_no_sub = m.group(1)

    pat = rf'(_Z.+){len_sym}{sym}(E.*)'
    repl = rf'__real_\g<1>{len(sym_no_sub)}{sym_no_sub}\g<2>'
    wrapped = re.sub(pat, repl, mangled)
    print(wrapped)
    return wrapped


def main():
    in_asm_file = sys.argv[1]
    try:
        out_asm_file = sys.argv[2]
    except IndexError:
        shutil.copyfile(in_asm_file, in_asm_file + '.backup')
        out_asm_file = in_asm_file
    with open(in_asm_file) as f:
        asm = f.read();
    asm = re.sub(r'_Z.*?\$Sub\$\$([a-zA-Z0-9_]+)', transfer_sub, asm)
    asm = re.sub(r'_Z.*?\$Super\$\$([a-zA-Z0-9_]+)', transfer_super, asm)
    with open(out_asm_file, 'w') as f:
        f.write(asm)

    # mangled = "_ZN9Container11$Sub$$BuildEv"
    # mangled = "_ZN3Foo9$Sub$$fooEv"
    # mangled = "_ZN11Container2211$Sub$$BuildEv"
    # wrapped = transfer_sub(mangled);
    # print(wrapped)
    # assert wrapped == "__wrap__ZN9Container5BuildEv"


    # ast = demangle('_ZN3Foo9$Sub$$fooEv')

    # print(repr(ast[1]))
    # print(ast)

    # ast = demangle('_ZN11Container2211$Sub$$BuildEv')

    # print(repr(ast[-2]))
    # print(repr(ast))
    # print(ast)

if __name__ == "__main__":
    print("aa")
    main()
    # import doctest
    # doctest.testmod()
